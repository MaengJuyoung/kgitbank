package space1;

interface SampleInterface {
	void method();
}
interface ReturnInterface {
	int method(int n1, int n2);
}

public class EX1 {
	public static void sample1() {
		// 람다식(Lambda Expression)
		// - 익명객체에 가까운 것
		// - 유사한 것 뿐이고, 약간 더 하위에 있는 것
		// - 람다식의 주 목적 : 코드의 간결화
		
		// 하나의 메서드만 존재하는 인터페이스 - 함수형 인터페이스에 적용함
		
		// 익명객체
		// - 범용 & 상속구조
		// - 내부적으로는 클래스파일이 생성됨 
		SampleInterface o1 = new SampleInterface() {
			public void method() {
				System.out.println("익명객체로 생성한 메서드!");
			}
		};
		// 람다식은 클래스파일없이 내부에서 자동으로 처리가 됨
		// - 클래스파일을 통해 별도로 관리가 되는 구조가 아니기에 더 간결함
		// 람다식 case 1 - 중괄호가 없음
		SampleInterface o2 = () -> System.out.println("람다식 case 1");
		// 람다식 case 2 - 중괄호가 있음
		SampleInterface o3 = () -> {
			System.out.println("람다식 case 2");
		};
		o1.method();
		o2.method();
		o3.method();
	}
	public static void main(String[] args) {
		// 매개변수 및 반환이 있는 경우의 람다식
		// 1) 매개변수의 변수명은 준수할 필요없지만, 자료형은 무조건 준수해줘야 함
		// 2) 반환은 실행하는 코드에 따라 작성방식이 달라지니 주의
		
		ReturnInterface o1 = new ReturnInterface() {
			public int method(int n1, int n2) {
				return n1 + n2;
			}
		};
		
		// case 1 - 자동으로 return이 붙음 / 한줄이니 연산식 외에는 불가능하니까...
		ReturnInterface o2 = (int n1, int n2)->n1 + n2;
		
		// case 2 - 여러줄에 여러변수를 준비하게 되니, return을 써 명시할 것을 요구함
		ReturnInterface o3 = (int n1, int n2)-> {
			return n1 + n2;
		};
		
		// 사용은 메서드를 쓰니 전부 동일하
		System.out.println(o1.method(10,20));
		System.out.println(o2.method(11,21));
		System.out.println(o3.method(12,22));
		
	}
}
