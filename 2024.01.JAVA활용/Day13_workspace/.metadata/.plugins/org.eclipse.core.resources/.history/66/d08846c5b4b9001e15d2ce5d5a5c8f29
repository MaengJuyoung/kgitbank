package space2;

import java.io.IOException;
import java.net.InetAddress;
import java.net.Socket;

// 클라이언트(Client or Guest)
// - 상대방에게 접속하고자 하는 컴퓨터
// - 목적지가 필요함
// - 접속한 컴퓨터에게 서비스를 요청함
class SampleClient implements Runnable {
	private InetAddress destination;	// 목적지 정보
	private int port;					// 통신하기 위해 나가는 "개찰구번호"
	public SampleClient(InetAddress dest, int port) {
		this.destination = dest;
		this.port = port;
	}
	public void run() {
		// Socket 클래스 - 클라이언트가 서버에게 접속을 시도해 통로를 만드는 클래스
		try {
			Socket link = new Socket(destination, port);
			System.out.println("Client : Connected!");
		} catch (IOException e) {
			System.out.println(e);
		}
	}
}
// 서버(Server or Host)
// - 접속요청이 오면 접속을 받아주는 컴퓨터
// - 요청에 대한 수락처리가 필요함
// - 접속된 컴퓨터에 서비스를 제공함
class SampleServer implements Runnable {
	private int port;	// 나에게 통신을 시도한 컴퓨터가 사용하는 "개찰구번호"를 기록함
	public SampleServer(int port) {
		this.port = port;
	}
	public void run() {
		try {
			ServerSocket link = new ServerSocket(port);
		} catch (IOException e) {
			System.out.println(e);
		}
	}
}

public class EX1 {
	public static void main(String[] args) {
		// Network : 통신을 하기 위한 통로
		// IP : 통신을 하기 위한 전반적인 통신 규격/규칙
		// IP Address : IP상에서 상대방을 식별하기 위한 식별정보
		// Domain Name : IP를 문자열로 변환하며 매칭시켜놓은 것
		// -> 통신방식을 정해서 통신을 해야 함
		
		// 1) TCP(Transmission Control Protocol)
		//    - 연결이 먼저 수립되어야 함
		//    - 전송되는 데이터에 대하여 오류정정이 적용됨
		//    - UDP보다 느림( + 컴퓨터의 자원을 많이 요구함 )

		
		
		
		
		
		
		
		
		// 2) UDP(User Datagram Protocol)
		//    - 상대방이 받든 말든 데이터를 전송하는 방식
		//    - 데이터의 신뢰도에 대한 보장이 안되어 있음
		//    - TCP보다 빠름( + 컴퓨터의 자원을 덜 소모함 )
	}
}