package space1;

import java.util.function.Function;

class Sample {
	public int x;
	public int y;
	public Sample(int x, int y) {
		this.x = x;
		this.y = y;
	}
}

public class EX3 {
	public static void EX31() {
		// Function
		// A.compose(B) - B를 먼저 실행하고 A를 실행함 -> A(B(value)) 구조가 성립해야 함
		// A.andThen(B) - A를 먼저 실행하고 B를 실행함 -> B(A(value)) 구조가 성립해야 함
		Sample sam1 = new Sample(0, 0);
		Function<Sample, Sample> function1 = (Sample o) -> {
			o.x += 5;
			o.y -= 5;
			return o;
		};
		Function<Sample, Integer[]> function2 = (Sample o) -> {
			Integer[] arr = new Integer[2];
			arr[0] = o.x;
			arr[1] = o.y;
			return arr;
		};
		Function<Sample, Integer[]> comp = function2.compose(function1);
		Function<Sample, Integer[]> andT = function1.andThen(function2);
		Integer[] arr1 = comp.apply(sam1);
		Integer[] arr2 = comp.apply(sam1);
		System.out.println();
	}
	public static void EX32() {
		
	}
	public static void main(String[] args) {
		// ※ function 패키지의 사용 이유 -> 메서드의 재사용/재활용/결합/조합
		// Function	 : compose / andThen
		EX31();
		// Predicate : and / or
		EX32();
	}
}
