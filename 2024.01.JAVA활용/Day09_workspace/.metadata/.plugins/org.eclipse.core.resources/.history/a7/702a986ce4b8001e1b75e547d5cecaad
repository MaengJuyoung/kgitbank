package newSpace;

import java.util.Scanner;

class InputThread implements Runnable {
	// 동시작업을 하고자 하는 객체이자 필드이자 통제를 위한 객체
	private Object lock;

	public InputThread(Object lock) {
		this.lock = lock;
	}

	public void run() {
		Scanner sc = new Scanner(System.in);
		// synchronized 블럭
		// - 서로 다른 쓰레드가 서로 연동되어 동작하도록 하기 위한 구간
		// - 먼저 실행된 쓰레드에서 "실행"을 선점할 수 있도록 해줌
		//   -> 이를 "LOCK을 획득한 상태/획득했다" 등으로 표현함
		//   -> 획득한 구간에서 할일을 다 끝냈으면 자동으로 LOCK이 풀림
		//   -> 다른 쓰레드에서 경쟁적으로 먼저 선점을 시도하고, 획득하면 실행되는 방식을 취함
		synchronized (lock) {
			while (true) {
				System.out.print("시작을 입력하세요 > ");
				String word = sc.nextLine();
				if (word.equals("시작"))
					break;
			}
			// notify() : 메서드
			// - lock을 양보한 쓰레드가 다시 동작하도록 만들어줌
			lock.notify();
			// lock.notifyAll();
			// - 모든 양보한 쓰레드에게 다시 동작하도록 알려줌
		}
	}
}

class OutputThread implements Runnable {
	private Object lock;
	private String name;

	public OutputThread(String name, Object lock) {
		this.name = name;
		this.lock = lock;
	}

	public void run() {
		try {
			synchronized (lock) {
				// wait() 메서드
				// - LOCK을 먼저 획득했을 경우, 이를 양보하고 대기상태로 진입하는 것
				// - 조건문으로 이를 통제하여 양보를 구현함
				// - LOCK은 객체라는 것을 이용해...필드값을 활용해 쓰레드의 동작을 통제할 수 있음
				lock.wait();
				System.out.println(name);
				for (int i = 1; i < 10; i += 1) System.out.print(" " + i);
			}
		} catch (InterruptedException e) {
			System.out.println(e);
		}
	}
}

public class EX1 {
	public static void main(String[] args) {
		// 쓰레드를 구성할 때...
		// ※ 되도록 서로 영향을 주고받지 않는게 좋음(별도작업으로 구성하는게 좋음)

		// 하지만...서로 다른 두 쓰레드가 동시에 작업을 하고 싶다
		// ※ 동시에 하는 편이 유리한 상황도 존재하게 됨

		// Lock : 동시작업을 하는 대상
		// synchronized 구간 - 동기화되어 작동시킬 구간을 설정하게 됨
		// wait() : 먼저 실행되면 안될 경우, 해당 쓰레드를 일시정지시킴
		// notify() : 일시정지된 쓰레드가 존재할 경우, 이를 다시 시작시키기 위해 사용함
		Object lock = new Object();
		Thread t1 = new Thread(new InputThread(lock));
		Thread t2 = new Thread(new OutputThread("1번 쓰레드", lock));
		Thread t3 = new Thread(new OutputThread("2번 쓰레드", lock));
		t1.start();
		t2.start();
	}
}
